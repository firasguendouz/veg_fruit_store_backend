Build a scalable and secure Server Backend for a Vegetables & Fruits Store in Germany using Express.js and PostgreSQL. The backend must include secure JWT-based authentication, RESTful APIs for managing users, products, orders, and admin operations, with robust error handling, schema validation using Joi, and middleware for logging, CORS, helmet security, and rate limiting. Use Prisma ORM for efficient database management and schema migrations. Begin by defining clear and modular database models: User, Product, Order, Admin, Category, and OrderItem, ensuring relational integrity and optimized queries. Develop highly cohesive and decoupled controllers for User, Product, Order, and Admin functionalities, each with corresponding service layers to handle business logic. Implement feature-specific routes for each module, protected by middleware for authentication (protect) and fine-grained access control (RBAC). The Admin controller should include user and product management, detailed analytics, and order overviews. The Order controller should handle order placement, status updates, history retrieval, and advanced querying capabilities. Document all endpoints comprehensively using Swagger UI with examples for requests and responses. Prepare Dockerfiles for both development and production environments, with optimized .env configurations for secrets and deployment variables. Include CI/CD pipelines via GitHub Actions for seamless integration and deployment workflows. Add health-check endpoints for monitoring and ensure server resilience under load. Write extensive unit and integration tests for critical endpoints using Jest and Supertest. Provide a detailed and well-structured README.md, including clear setup instructions, environment variable configurations, migration commands, and deployment guidelines. Follow best practices for API versioning, secure password storage, database indexing, and query optimization to guarantee long-term scalability and maintainability. Ensure all components follow a modular folder structure for clarity, reusability, and future scalability.