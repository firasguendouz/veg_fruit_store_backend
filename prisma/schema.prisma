// Prisma schema for Vegetables & Fruits Store Backend

// Generator for Prisma Client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]  // Add the correct binary target for Docker
}


// Database Configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================
// User Model
// ====================
model User {
  id           String    @id @default(uuid())
  email        String    @unique @db.VarChar(255)
  password     String    @db.VarChar(255)
  firstName    String    @db.VarChar(50)
  lastName     String    @db.VarChar(50)
  phoneNumber  String?   @db.VarChar(20)
  address      String?   @db.VarChar(255)
  notifications Json?    // Notification preferences
  role         String    @default("client") // Possible values: client, admin
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  orders       Order[]   @relation("UserOrders")
  wishlist     Product[] @relation("UserWishlist")
}

// ====================
// Product Model
// ====================
model Product {
  id          String    @id @default(uuid())
  sku         String    @unique @db.VarChar(100)
  name        String    @db.VarChar(100)
  category    String    @db.VarChar(50)
  quantity    Int       @default(0)
  unitPrice   Float     @default(0.0)
  pricePer100g Float?   // Optional, for items sold by weight
  status      String    @default("active") // Possible: active, blocked
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  wishlistBy  User[]    @relation("UserWishlist")
}

// ====================
// Order Model
// ====================
model Order {
  id              String   @id @default(uuid())
  recipientName   String   @db.VarChar(100)
  recipientAddress String  @db.VarChar(255)
  recipientPhone  String?  @db.VarChar(20)
  productList     Json     // Array of product objects (id, sku, name, quantity, price)
  totalAmount     Float    @default(0.0)
  paymentMethod   String   @default("unpaid") // Possible: unpaid, credit_card, cash, online
  paymentStatus   String   @default("pending") // Possible: pending, completed, failed
  orderStatus     String   @default("processing") // Possible: processing, shipped, delivered, cancelled
  deliveryType    String   @default("delivery") // Possible: delivery, pickup
  clientId        String?  @db.VarChar(100) // Linked to User ID
  guestId         String?  @db.VarChar(100) // For guest users
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User?    @relation("UserOrders", fields: [clientId], references: [id])
}

// ====================
// Admin Model
// ====================
model Admin {
  id           String   @id @default(uuid())
  email        String   @unique @db.VarChar(255)
  password     String   @db.VarChar(255)
  firstName    String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  role         String   @default("superadmin") // Possible: superadmin, moderator
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
